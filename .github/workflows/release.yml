name: Release Binaries and Update Version Info

on:
  push:
    branches:
      - main
    paths:
      - 'linux-amd64/**'
      - 'linux-arm64/**'
      - 'macosx-amd64/**'
      - 'macosx-arm64/**'
      - 'windows-amd64/**'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract version from filenames
        run: |
          # Your existing script to extract VERSION and MIN_VERSION

      - name: Create GitHub Release and upload binaries
        uses: softprops/action-gh-release@v1
        with:
          # Your existing configuration for creating a release

      - name: Generate version.json
        run: |
          echo "{\"latest\": \"${{ env.VERSION }}\", \"minVersion\": \"${{ env.MIN_VERSION }}\"}" > version.json

      - name: Delete existing version-info tag and release
        run: |
          # Delete the tag
          curl -s -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/tags/version-info

          # Delete the release
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/version-info \
            | jq -r '.id // empty')
          if [ ! -z "$RELEASE_ID" ]; then
            curl -s -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
          fi

      - name: Create new version-info release
        run: |
          # Create a new release
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{\"tag_name\": \"version-info\", \"name\": \"version-info\", \"body\": \"Version information\", \"draft\": false, \"prerelease\": false}"

      - name: Upload version.json to version-info release
        run: |
          # Get the upload URL for the new release
          UPLOAD_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/version-info \
            | jq -r '.upload_url' | sed "s/{?name,label}//")
          
          # Upload version.json to the new release
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @version.json \
            "${UPLOAD_URL}?name=version.json"
